#!/bin/bash
#
# Send command to remote host over SSH
# 
# author: Aldrin Edison Baroi
#
# license: GPL v3+
#

userId=
remoteHost=
cmd=
verboseMode=false
quietMode=false
promptFor_SSH_PASSWD=false
promptFor_SUDO_PASSWD=false
SSH_PASSWD=
SUDO_PASSWD=
executeCmd=true

function abort
{
	printf "\n${1}\nExiting...\n\n" 1>&2
        exit 1
}

function showUsage
{
	echo ""
	echo "  Usage: sshexe [OPTIONS] -u SSH_USER_ID -h SSH_HOST COMMAND_AND_ARGS"
	echo "  OPTIONS:"
	echo "    -v Set verbose output"
	echo "    -q Set quiet/silent mode.  Suppress all output. Errors logged into syslog"
	echo "    -p Prompt for SSH password"
	echo "    -s Prompt for SUDO password"
	echo "    -P PASSWORD Provide SSH password on the command line"
	echo "    -S PASSWORD Provide SUDO password on the command line"
	echo "    -n Do not execute. Show the full command to be executed"
	echo "    -H Help. Show this usage/help text"
	echo ""
	exit 0
}

function validateCmdLineArgs
{
	local validationError=false
	info[0]="SSH login user ID not provided"
	info[1]="SSH host not provided"
	if [ -z ${userId} ]; then errMsg+=("${info[0]}"); validationError=true; fi
	if [ -z ${remoteHost} ]; then errMsg+=("${info[1]}"); validationError=true; fi
	if [ ${validationError} = true ];then
		echo "" 1>&2
		echo "Command line arguments validation error:" 1>&2
		for (( i = 0; i < ${#errMsg[@]}; i++ )); do
			echo -e "\t${errMsg[$i]}" 1>&2
		done
		abort 
	fi
}

function getSshPassword
{
	echo ""
	read -sp "Enter SSH login password for [${userId}]: " SSH_PASSWD
	if [ -z ${SSH_PASSWD} ]; then
		abort "No password provided."
	fi
	echo ""
}

function getSudoPassword
{
	echo ""
	read -sp "Enter SUDO password for [${userId}]: " SUDO_PASSWD
	if [ -z ${SUDO_PASSWD} ]; then
		abort "No password provided."
	fi
	echo ""
}

function generateCommand
{
	SSH_CMD="" 
	if [ -z ${SSH_PASSWD} ]; then
		SSH_CMD="ssh ${userId}@${remoteHost}"
	else
		SSH_CMD="sshpass -p ${SSH_PASSWD} ssh ${userId}@${remoteHost}"
	fi
	if [ ${quietMode} = true ]; then
		SSH_CMD+=" -q"
		REDIRECT_OUTPUT=" 3> /dev/null 1>&3 2>&1 | logger "
	fi
	if [ -z ${SUDO_PASSWD} ]; then
		SSH_CMD+=" ${cmd} '${args}'"
	else
		SSH_CMD+=" echo ${SUDO_PASSWD} | sudo -S ${cmd} '${args}'"
	fi
	SSH_CMD+=${REDIRECT_OUTPUT} 
}


#
# process options
#
[ ${#} = 0 ]  && showUsage 
while getopts "vqpsu:h:P:S:Hn"  opt ${@}; do
	case $opt in
		v)
			verboseMode=true
			;;
		q)
			quietMode=true
			;;
		u)
			userId=$OPTARG
			;;
		h)
			remoteHost=$OPTARG
			;;
		p)
			promptFor_SSH_PASSWD=true
			;;
		s)
			promptFor_SUDO_PASSWD=true
			;;
		P)
			SSH_PASSWD=$OPTARG
			;;
		S)
			SUDO_PASSWD=$OPTARG
			;;
		n)
			executeCmd=false
			;;
		H)
			showUsage
			;;
		:)
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			;;
	esac
done 
shift $((OPTIND -1)); cmd=${1}; shift; args="${@}" 
[ ${quietMode} = true ] && verboseMode=false

if [ ${verboseMode} = true ]; then
	echo ""
	echo "Command Line args "
	echo "  Verbose Mode          : ${verboseMode}"
	echo "  Quiet Mode            : ${quietMode}"
	echo "  User Id               : ${userId}"
	echo "  SSH Host              : ${remoteHost}"
	echo "  Prompt for SSH PASSWD : ${promptFor_SSH_PASSWD}"
	echo "  Prompt for SUDO PASSWD: ${promptFor_SUDO_PASSWD}"
	echo "  Command               : ${cmd}"
	echo "  Arguments             : ${args}"
	echo ""
fi
#
validateCmdLineArgs
if [ ${promptFor_SSH_PASSWD} = true ]; then getSshPassword; fi
if [ ${promptFor_SUDO_PASSWD} = true ]; then getSudoPassword; fi
generateCommand
if [ ${executeCmd} = true ]; then
	[ ${verboseMode} = 1 ] && printf "\nExecuting SSH command...\n"
	${SSH_CMD}
else
	echo ""
	echo "Command: ${SSH_CMD}"
	echo ""
fi
[ ${verboseMode} = 1 ] && echo ""
#::END::
